----
クラス名について

棲み分けのため

charlotte.tools 配下
	クラス名の最後に以下をなるべく付ける。
		インスタンス化しないやつ ⇒ Tools
		インスタンス化するやつ   ⇒ Unit

charlotte.tools 配下以外
	クラス名の最後に以下を付けない。
		Tools, Unit

	代替 ⇒
		Utils, Info


----
引数と戻り値の配列とListについてのガイドライン

	public static int[] pppp(int[] a, int[][] b, int[][][] c) {
		...
	}

	public static List<String> tttt(String[] a, String[][] b, String[][][] c) {
		return tttt(IArrays.asList(a), IArrays.asList(b), IArrays.asList(c));
	}

	public static List<String> tttt(List<String> a, List<String[]> b, List<String[][]> c) {
		...
	}

	又は

	public static List<String> tttt(Iterable<String> a, Iterable<String[]> b, Iterable<String[][]> c) {
		...
	}

	public static List<String[]> tttt2() {
		...
	}

	public static List<String[][]> tttt3() {
		...
	}


----
デリゲート対応表

Java                          C#                             charlotte.tools で実装している
-------------------------------------------------------------------------------------------
Runnable                      Action
Consumer<T>                   Action<T>
BiConsumer<T, U>              Action<T, U>                   Y
TriConsumer<T, U, V>          Action<T, U, V>                Y
QuadConsumer<T, U, V, W>      Action<T, U, V, W>             Y

Supplier<T>                   Func<T>
Predicate<T>                  Func<T, bool> | Predicate<T>
Function<T, R>                Func<T, R>
BinaryOperator<T>             Func<T, T, T>
BiFunction<T, U, R>           Func<T, U, R>
TriFunction<T, U, V, R>       Func<T, U, V, R>               Y
QuadFunction<T, U, V, W, R>   Func<T, U, V, W, R>            Y


----
その他のガイドライン

	総称型クラスは public な静的メンバーを持たない。

	- - -
	例外のキャッチ

	try {
		...
	}
	catch(Returning e) {
		// noop
	}
	catch(Cancelled e) {
		System.out.println("中止しました。");
	}
	catch(Throwable e) {
		e.printStackTrace();
	}

	- - -
	AutoCloseable の close の実装

	★複数のハンドルを持ち、全てのハンドルを閉じるだけの場合のみ

	private LimitCounter _closeOnce = LimitCounter.one();

	@Override
	public void close() throws Exception {
		if(_closeOnce.issue()) {
			ExceptionDam.section(eDam -> {
				eDam.invoke(() -> _handle01.close());
				eDam.invoke(() -> _handle02.close());
				eDam.invoke(() -> _handle03.close());
				...
			});
		}
	}

